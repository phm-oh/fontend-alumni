import React, { useState, useEffect, createContext, useContext } from 'react';
import './styles/App.css';

// App Context for global state
const AppContext = createContext();

export const useAppContext = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useAppContext must be used within AppProvider');
  }
  return context;
};

// Environment variables (Vite uses import.meta.env)
const config = {
  apiUrl: import.meta.env.VITE_API_URL,
  appName: import.meta.env.VITE_APP_NAME,
  collegeName: import.meta.env.VITE_COLLEGE_NAME,
  collegeAddress: import.meta.env.VITE_COLLEGE_ADDRESS,
  collegePhone: import.meta.env.VITE_COLLEGE_PHONE,
  devName: import.meta.env.VITE_DEV_NAME,
  imageLogo: import.meta.env.VITE_IMAGE_LOGO,
  imageGift: import.meta.env.VITE_IMAGE_GIFT,
  bankName: import.meta.env.VITE_BANK_NAME,
  bankAccount: import.meta.env.VITE_BANK_ACCOUNT,
  bankAccountName: import.meta.env.VITE_BANK_ACCOUNT_NAME,
  bankBranch: import.meta.env.VITE_BANK_BRANCH,
  membershipFee: parseInt(import.meta.env.VITE_MEMBERSHIP_FEE),
  shippingFee: parseInt(import.meta.env.VITE_SHIPPING_FEE),
  maxFileSize: parseInt(import.meta.env.VITE_MAX_FILE_SIZE),
  allowedFileTypes: import.meta.env.VITE_ALLOWED_FILE_TYPES.split(',')
};

// API utility function
const apiCall = async (endpoint, options = {}) => {
  const token = localStorage.getItem('token');
  
  const defaultHeaders = {
    'Content-Type': 'application/json',
  };

  if (token) {
    defaultHeaders.Authorization = `Bearer ${token}`;
  }

  const config = {
    headers: defaultHeaders,
    ...options,
  };

  // Remove Content-Type for FormData
  if (options.body instanceof FormData) {
    delete config.headers['Content-Type'];
  }

  try {
    const response = await fetch(`${import.meta.env.VITE_API_URL}${endpoint}`, config);
    const data = await response.json();
    
    if (!response.ok) {
      throw new Error(data.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    }
    
    return data;
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
};

// Image Error Handling Component
const SafeImage = ({ src, alt, className, fallback = null }) => {
  const [imageError, setImageError] = useState(false);
  const [loading, setLoading] = useState(true);

  const handleImageError = () => {
    setImageError(true);
    setLoading(false);
  };

  const handleImageLoad = () => {
    setLoading(false);
  };

  if (!src || imageError) {
    return fallback || <div className={`image-placeholder ${className}`}>{alt}</div>;
  }

  return (
    <>
      {loading && <div className={`image-loading ${className}`}>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>}
      <img
        src={src}
        alt={alt}
        className={className}
        onError={handleImageError}
        onLoad={handleImageLoad}
        style={{ display: loading ? 'none' : 'block' }}
      />
    </>
  );
};
const mockData = {
  graduationYears: Array.from({ length: 30 }, (_, i) => 2024 - i),
  departments: [
    '‡∏ä‡πà‡∏≤‡∏á‡∏¢‡∏ô‡∏ï‡πå',
    '‡∏ä‡πà‡∏≤‡∏á‡πÑ‡∏ü‡∏ü‡πâ‡∏≤',
    '‡∏ä‡πà‡∏≤‡∏á‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå',
    '‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå',
    '‡∏ä‡πà‡∏≤‡∏á‡∏Å‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á',
    '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ',
    '‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î',
    '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à',
    '‡∏Å‡∏≤‡∏£‡πÇ‡∏£‡∏á‡πÅ‡∏£‡∏°',
    '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£'
  ]
};

// Landing Page Component
const LandingPage = ({ onNavigate }) => {
  return (
    <div className="page landing-page">
      <div className="hero-section">
        <div className="container">
          <div className="hero-content">
            <div className="hero-logo">
              <SafeImage 
                src={config.imageLogo} 
                alt="‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢" 
                className="college-logo"
                fallback={<div className="college-logo-placeholder">üè´</div>}
              />
            </div>
            <h1 className="hero-title">{config.appName}</h1>
            <h2 className="college-name">{config.collegeName}</h2>
            <p className="hero-subtitle">
              ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏™‡∏≤‡∏¢‡πÉ‡∏¢‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤ ‡∏™‡∏∑‡∏ö‡∏™‡∏≤‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏û‡∏ì‡∏µ ‡πÅ‡∏•‡∏∞‡∏£‡πà‡∏ß‡∏°‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏™‡∏ñ‡∏≤‡∏ö‡∏±‡∏ô
            </p>
            <div className="hero-actions">
              <button 
                className="btn btn-primary btn-large"
                onClick={() => onNavigate('register')}
              >
                ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤
              </button>
              <button 
                className="btn btn-outline btn-large"
                onClick={() => onNavigate('check-status')}
              >
                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
              </button>
            </div>
          </div>
        </div>
      </div>

      <div className="features-section">
        <div className="container">
          <h2 className="section-title">‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤</h2>
          <div className="features-grid">
            <div className="feature-card">
              <div className="feature-icon">üéì</div>
              <h3>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</h3>
              <p>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢‡πÜ ‡∏ú‡πà‡∏≤‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üí≥</div>
              <h3>‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏∞‡∏î‡∏ß‡∏Å</h3>
              <p>‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÄ‡∏ß‡∏•‡∏≤</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">ü§ù</div>
              <h3>‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤</h3>
              <p>‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢‡∏Å‡∏±‡∏ö‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤‡∏Ñ‡∏ô‡∏≠‡∏∑‡πà‡∏ô‡πÜ</p>
            </div>
            <div className="feature-card">
              <div className="feature-icon">üìä</div>
              <h3>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h3>
              <p>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ</p>
            </div>
          </div>
        </div>
      </div>

      <div className="info-section">
        <div className="container">
          <div className="info-content">
            <div className="info-grid">
              <div className="info-card">
                <h3>‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ</h3>
                <div className="price">{config.membershipFee} ‡∏ö‡∏≤‡∏ó</div>
                <p>‡∏£‡∏ß‡∏°‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå‡∏ï‡πà‡∏≤‡∏á‡πÜ</p>
              </div>
              <div className="info-card">
                <h3>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h3>
                <div className="price">+{config.shippingFee} ‡∏ö‡∏≤‡∏ó</div>
                <p>‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå</p>
              </div>
            </div>
            
            <div className="gift-preview">
              <h3>‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å</h3>
              <SafeImage 
                src={config.imageGift} 
                alt="‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å" 
                className="gift-image"
                fallback={<div className="gift-placeholder">üéÅ ‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å</div>}
              />
              <p>‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏•‡∏∂‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Alumni Registration Component
const AlumniRegistration = ({ onNavigate }) => {
  const { setIdCard } = useAppContext();
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    idCard: '',
    address: '',
    graduationYear: '',
    department: '',
    phone: '',
    email: '',
    currentJob: '',
    workplace: '',
    facebookId: '',
    lineId: '',
    paymentMethod: '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
    deliveryOption: '‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢',
    pdpaConsent: false
  });

  const [profileImage, setProfileImage] = useState(null);
  const [profilePreview, setProfilePreview] = useState('');
  const [paymentProof, setPaymentProof] = useState(null);
  const [paymentPreview, setPaymentPreview] = useState('');
  const [loading, setLoading] = useState(false);
  const [errors, setErrors] = useState({});

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
    
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  const handleFileChange = (e, fileType) => {
    const file = e.target.files[0];
    if (!file) return;

    // Validate file type
    if (!config.allowedFileTypes.includes(file.type)) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå JPG, PNG ‡∏´‡∏£‡∏∑‡∏≠ PDF ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      return;
    }

    // Validate file size
    if (file.size > config.maxFileSize) {
      alert('‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB');
      return;
    }

    if (fileType === 'profile') {
      setProfileImage(file);
      // Create preview for profile image
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => setProfilePreview(e.target.result);
        reader.readAsDataURL(file);
      }
    } else if (fileType === 'payment') {
      setPaymentProof(file);
      // Create preview for payment proof
      if (file.type.startsWith('image/')) {
        const reader = new FileReader();
        reader.onload = (e) => setPaymentPreview(e.target.result);
        reader.readAsDataURL(file);
      } else {
        setPaymentPreview('');
      }
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.firstName.trim()) newErrors.firstName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠';
    if (!formData.lastName.trim()) newErrors.lastName = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•';
    
    if (!formData.idCard.trim()) {
      newErrors.idCard = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô';
    } else if (!/^\d{13}$/.test(formData.idCard)) {
      newErrors.idCard = '‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 13 ‡∏´‡∏•‡∏±‡∏Å';
    }

    if (!formData.address.trim()) newErrors.address = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà';
    if (!formData.graduationYear) newErrors.graduationYear = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö';
    if (!formData.department) newErrors.department = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤';
    
    if (!formData.phone.trim()) {
      newErrors.phone = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå';
    } else if (!/^0[0-9]{9}$/.test(formData.phone)) {
      newErrors.phone = '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }

    if (!formData.email.trim()) {
      newErrors.email = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•';
    } else if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      newErrors.email = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    }

    if (!formData.pdpaConsent) {
      newErrors.pdpaConsent = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async () => {
    if (!validateForm()) return;

    setLoading(true);

    try {
      // Create FormData for file uploads
      const submitData = new FormData();
      
      // Add all form data
      Object.keys(formData).forEach(key => {
        submitData.append(key, formData[key]);
      });

      // Add profile image if exists
      if (profileImage) {
        submitData.append('profileImage', profileImage);
      }

      // Add payment proof if exists
      if (paymentProof) {
        submitData.append('paymentProof', paymentProof);
      }

      console.log('Submitting to:', `${config.apiUrl}/api/alumni/register`);
      
      // Submit to backend API
      const response = await fetch(`${config.apiUrl}/api/alumni/register`, {
        method: 'POST',
        body: submitData,
        // Don't set Content-Type header, browser will set it automatically for FormData
      });

      const result = await response.json();

      if (response.ok && result.success) {
        alert(`‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! 
‡∏£‡∏´‡∏±‡∏™‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${result.data._id}
‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏ó‡πà‡∏≤‡∏ô`);
        
        // Navigate to status check with the ID card
        setIdCard(formData.idCard);
        onNavigate('check-status');
      } else {
        throw new Error(result.message || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô');
      }
    } catch (error) {
      console.error('Registration Error:', error);
      alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô network error ‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏û‡∏£‡∏≤‡∏∞ backend ‡πÑ‡∏°‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      if (error.message.includes('fetch')) {
        alert('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ' + config.apiUrl);
      }
    } finally {
      setLoading(false);
    }
  };

  const totalAmount = config.membershipFee + (formData.deliveryOption === '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå' ? config.shippingFee : 0);

  return (
    <div className="page registration-page">
      <div className="container">
        <div className="page-header">
          <button 
            className="btn-back"
            onClick={() => onNavigate('home')}
          >
            ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </button>
          <div className="header-logo">
            <SafeImage 
              src={config.imageLogo} 
              alt="‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢" 
              className="page-logo"
              fallback={<div className="page-logo-placeholder">üè´</div>}
            />
          </div>
          <h1>‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤</h1>
          <h2>{config.collegeName}</h2>
          <p>‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á</p>
        </div>

        <div className="form-container">
          {/* Personal Information */}
          <div className="form-section">
            <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h2>
            <div className="form-grid">
              <div className="form-group">
                <label>‡∏ä‡∏∑‡πà‡∏≠ *</label>
                <input
                  type="text"
                  name="firstName"
                  value={formData.firstName}
                  onChange={handleInputChange}
                  className={errors.firstName ? 'error' : ''}
                />
                {errors.firstName && <span className="error-text">{errors.firstName}</span>}
              </div>
              <div className="form-group">
                <label>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• *</label>
                <input
                  type="text"
                  name="lastName"
                  value={formData.lastName}
                  onChange={handleInputChange}
                  className={errors.lastName ? 'error' : ''}
                />
                {errors.lastName && <span className="error-text">{errors.lastName}</span>}
              </div>
            </div>

            <div className="form-group">
              <label>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô *</label>
              <input
                type="text"
                name="idCard"
                value={formData.idCard}
                onChange={handleInputChange}
                placeholder="13 ‡∏´‡∏•‡∏±‡∏Å"
                maxLength="13"
                className={errors.idCard ? 'error' : ''}
              />
              {errors.idCard && <span className="error-text">{errors.idCard}</span>}
            </div>

            <div className="form-group">
              <label>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà *</label>
              <textarea
                name="address"
                value={formData.address}
                onChange={handleInputChange}
                rows="3"
                className={errors.address ? 'error' : ''}
              />
              {errors.address && <span className="error-text">{errors.address}</span>}
            </div>

            {/* Profile Image Upload */}
            <div className="form-group">
              <label>‡∏£‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß</label>
              <p className="field-description">
                ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏ñ‡πà‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏£‡∏á‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
              </p>
              <input
                type="file"
                id="profileImage"
                accept="image/jpeg,image/png"
                onChange={(e) => handleFileChange(e, 'profile')}
                style={{ display: 'none' }}
              />
              <label htmlFor="profileImage" className="file-label">
                {profileImage ? profileImage.name : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß (JPG, PNG)'}
              </label>
              {profilePreview && (
                <div className="file-preview">
                  <img src={profilePreview} alt="‡∏£‡∏π‡∏õ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß" />
                </div>
              )}
            </div>
          </div>

          {/* Education Information */}
          <div className="form-section">
            <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤</h2>
            <div className="form-grid">
              <div className="form-group">
                <label>‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö *</label>
                <select
                  name="graduationYear"
                  value={formData.graduationYear}
                  onChange={handleInputChange}
                  className={errors.graduationYear ? 'error' : ''}
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö</option>
                  {mockData.graduationYears.map(year => (
                    <option key={year} value={year}>{year}</option>
                  ))}
                </select>
                {errors.graduationYear && <span className="error-text">{errors.graduationYear}</span>}
              </div>
              <div className="form-group">
                <label>‡πÅ‡∏ú‡∏ô‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ *</label>
                <select
                  name="department"
                  value={formData.department}
                  onChange={handleInputChange}
                  className={errors.department ? 'error' : ''}
                >
                  <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</option>
                  {mockData.departments.map(dept => (
                    <option key={dept} value={dept}>{dept}</option>
                  ))}
                </select>
                {errors.department && <span className="error-text">{errors.department}</span>}
              </div>
            </div>
          </div>

          {/* Contact Information */}
          <div className="form-section">
            <h2>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠</h2>
            <div className="form-grid">
              <div className="form-group">
                <label>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå *</label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleInputChange}
                  placeholder="0xxxxxxxx"
                  className={errors.phone ? 'error' : ''}
                />
                {errors.phone && <span className="error-text">{errors.phone}</span>}
              </div>
              <div className="form-group">
                <label>‡∏≠‡∏µ‡πÄ‡∏°‡∏• *</label>
                <input
                  type="email"
                  name="email"
                  value={formData.email}
                  onChange={handleInputChange}
                  className={errors.email ? 'error' : ''}
                />
                {errors.email && <span className="error-text">{errors.email}</span>}
              </div>
            </div>

            <div className="form-grid">
              <div className="form-group">
                <label>‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</label>
                <input
                  type="text"
                  name="currentJob"
                  value={formData.currentJob}
                  onChange={handleInputChange}
                />
              </div>
              <div className="form-group">
                <label>‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô</label>
                <input
                  type="text"
                  name="workplace"
                  value={formData.workplace}
                  onChange={handleInputChange}
                />
              </div>
            </div>

            <div className="form-grid">
              <div className="form-group">
                <label>Facebook ID</label>
                <input
                  type="text"
                  name="facebookId"
                  value={formData.facebookId}
                  onChange={handleInputChange}
                />
              </div>
              <div className="form-group">
                <label>LINE ID</label>
                <input
                  type="text"
                  name="lineId"
                  value={formData.lineId}
                  onChange={handleInputChange}
                />
              </div>
            </div>
          </div>

          {/* Payment Section */}
          <div className="form-section">
            <h2>‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h2>
            
            <div className="payment-summary">
              <div className="fee-item">
                <span>‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏õ‡∏µ</span>
                <span>{config.membershipFee} ‡∏ö‡∏≤‡∏ó</span>
              </div>
              {formData.deliveryOption === '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå' && (
                <div className="fee-item">
                  <span>‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</span>
                  <span>{config.shippingFee} ‡∏ö‡∏≤‡∏ó</span>
                </div>
              )}
              <div className="fee-total">
                <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô</span>
                <span>{totalAmount} ‡∏ö‡∏≤‡∏ó</span>
              </div>
            </div>

            <div className="form-group">
              <label>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô *</label>
              <div className="radio-group">
                <label className="radio-item">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô"
                    checked={formData.paymentMethod === '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'}
                    onChange={handleInputChange}
                  />
                  <span>‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</span>
                </label>
                <label className="radio-item">
                  <input
                    type="radio"
                    name="paymentMethod"
                    value="‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á"
                    checked={formData.paymentMethod === '‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á'}
                    onChange={handleInputChange}
                  />
                  <span>‡∏ä‡∏≥‡∏£‡∏∞‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á</span>
                </label>
              </div>
            </div>

            <div className="form-group">
              <label>‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å *</label>
              <div className="radio-group">
                <label className="radio-item">
                  <input
                    type="radio"
                    name="deliveryOption"
                    value="‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢"
                    checked={formData.deliveryOption === '‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢'}
                    onChange={handleInputChange}
                  />
                  <span>‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢ (‡∏ü‡∏£‡∏µ)</span>
                </label>
                <label className="radio-item">
                  <input
                    type="radio"
                    name="deliveryOption"
                    value="‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå"
                    checked={formData.deliveryOption === '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå'}
                    onChange={handleInputChange}
                  />
                  <span>‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå (+{config.shippingFee} ‡∏ö‡∏≤‡∏ó)</span>
                </label>
              </div>
            </div>

            {formData.paymentMethod === '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô' && (
              <div className="payment-upload">
                <h3>‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô</h3>
                <div className="bank-info">
                  <div className="bank-detail">
                    <span className="label">‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£:</span>
                    <span>{config.bankName}</span>
                  </div>
                  <div className="bank-detail">
                    <span className="label">‡∏™‡∏≤‡∏Ç‡∏≤:</span>
                    <span>{config.bankBranch}</span>
                  </div>
                  <div className="bank-detail">
                    <span className="label">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</span>
                    <span>{config.bankAccount}</span>
                  </div>
                  <div className="bank-detail">
                    <span className="label">‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ç‡∏ä‡∏µ:</span>
                    <span>{config.bankAccountName}</span>
                  </div>
                  <div className="bank-detail">
                    <span className="label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</span>
                    <span className="amount">{totalAmount} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                </div>
                
                <div className="file-upload">
                  <h4>‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</h4>
                  <p className="field-description">
                    ‡∏≠‡∏±‡∏û‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏•‡∏¥‡∏õ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô ‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                  </p>
                  <input
                    type="file"
                    id="paymentProof"
                    accept="image/*,.pdf"
                    onChange={(e) => handleFileChange(e, 'payment')}
                    style={{ display: 'none' }}
                  />
                  <label htmlFor="paymentProof" className="file-label">
                    {paymentProof ? paymentProof.name : '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô (JPG, PNG, PDF)'}
                  </label>
                  {paymentPreview && (
                    <div className="file-preview">
                      <img src={paymentPreview} alt="‡∏´‡∏•‡∏±‡∏Å‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô" />
                    </div>
                  )}
                </div>
              </div>
            )}
          </div>

          {/* PDPA Consent */}
          <div className="form-section">
            <div className="consent-section">
              <label className="checkbox-item">
                <input
                  type="checkbox"
                  name="pdpaConsent"
                  checked={formData.pdpaConsent}
                  onChange={handleInputChange}
                />
                <span>
                  ‡∏Ç‡πâ‡∏≤‡∏û‡πÄ‡∏à‡πâ‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡πÉ‡∏´‡πâ‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏™‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≤‡∏Ñ‡∏° *
                </span>
              </label>
              {errors.pdpaConsent && <span className="error-text">{errors.pdpaConsent}</span>}
            </div>
          </div>

          <div className="form-actions">
            <button 
              className="btn btn-primary btn-large"
              disabled={loading}
              onClick={handleSubmit}
            >
              {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô...' : '‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô'}
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

// Status Check Component
const StatusCheck = ({ onNavigate, initialIdCard = '' }) => {
  const [idCard, setIdCard] = useState(initialIdCard);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  // Auto search if initialIdCard is provided
  useEffect(() => {
    if (initialIdCard && initialIdCard.length === 13) {
      handleSubmit();
    }
  }, [initialIdCard]);

  const handleSubmit = async () => {
    const currentIdCard = idCard || initialIdCard;
    
    if (!currentIdCard.trim()) {
      setError('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô');
      return;
    }

    if (!/^\d{13}$/.test(currentIdCard)) {
      setError('‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç 13 ‡∏´‡∏•‡∏±‡∏Å');
      return;
    }

    setLoading(true);
    setError('');

    try {
      console.log('Checking status at:', `${config.apiUrl}/api/alumni/check-status`);
      
      const response = await fetch(`${config.apiUrl}/api/alumni/check-status`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ idCard: currentIdCard }),
      });

      const data = await response.json();

      if (response.ok && data.success) {
        setResult(data.data);
      } else {
        throw new Error(data.message || '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô');
      }
    } catch (error) {
      console.error('Status Check Error:', error);
      setError(error.message);
      setResult(null);
      
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô network error
      if (error.message.includes('fetch')) {
        setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ backend ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà');
      }
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadgeClass = (status) => {
    const statusMap = {
      '‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö': 'pending',
      '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß': 'approved', 
      '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô': 'waiting-payment',
      '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å': 'cancelled'
    };
    return `status-badge ${statusMap[status] || 'default'}`;
  };

  return (
    <div className="page status-check-page">
      <div className="container">
        <div className="page-header">
          <button 
            className="btn-back"
            onClick={() => onNavigate('home')}
          >
            ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
          </button>
          <div className="header-logo">
            <SafeImage 
              src={config.imageLogo} 
              alt="‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢" 
              className="page-logo"
              fallback={<div className="page-logo-placeholder">üè´</div>}
            />
          </div>
          <h1>‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</h1>
          <h2>{config.collegeName}</h2>
          <p>‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</p>
        </div>

        <div className="search-section">
          <div className="form-group">
            <label>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (13 ‡∏´‡∏•‡∏±‡∏Å)</label>
            <input
              type="text"
              value={idCard}
              onChange={(e) => setIdCard(e.target.value)}
              placeholder="1234567890123"
              maxLength="13"
              className={error ? 'error' : ''}
            />
            {error && <span className="error-text">{error}</span>}
          </div>

          <button 
            className="btn btn-primary"
            disabled={loading}
            onClick={handleSubmit}
          >
            {loading ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...' : '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'}
          </button>
        </div>

        {result && (
          <div className="result-section">
            <h2>‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</h2>
            <div className="result-card">
              <div className="result-header">
                <div className="member-info">
                  <h3>{result.firstName} {result.lastName}</h3>
                  <p>‡πÅ‡∏ú‡∏ô‡∏Å{result.department} ‡∏£‡∏∏‡πà‡∏ô {result.graduationYear}</p>
                </div>
                <span className={getStatusBadgeClass(result.status)}>
                  {result.status}
                </span>
              </div>
              
              <div className="result-details">
                <div className="detail-grid">
                  <div className="detail-item">
                    <span className="label">‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á:</span>
                    <span>{result.position}</span>
                  </div>
                  <div className="detail-item">
                    <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô:</span>
                    <span>{new Date(result.registrationDate).toLocaleDateString('th-TH')}</span>
                  </div>
                  <div className="detail-item">
                    <span className="label">‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞:</span>
                    <span>{result.paymentMethod}</span>
                  </div>
                  <div className="detail-item">
                    <span className="label">‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á:</span>
                    <span>{result.deliveryOption}</span>
                  </div>
                  {result.paymentDate && (
                    <div className="detail-item">
                      <span className="label">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:</span>
                      <span>{new Date(result.paymentDate).toLocaleDateString('th-TH')}</span>
                    </div>
                  )}
                  <div className="detail-item">
                    <span className="label">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô:</span>
                    <span>{result.totalAmount} ‡∏ö‡∏≤‡∏ó</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

// Main App Component
const App = () => {
  const [currentPage, setCurrentPage] = useState('home');
  const [user, setUser] = useState(null);
  const [loading, setLoading] = useState(false);
  const [registeredIdCard, setRegisteredIdCard] = useState('');

  const navigate = (page, idCard = '') => {
    setCurrentPage(page);
    if (idCard) {
      setRegisteredIdCard(idCard);
    }
    window.scrollTo(0, 0);
  };

  const contextValue = {
    user,
    setUser,
    navigate,
    currentPage,
    config,
    setIdCard: setRegisteredIdCard
  };

  if (loading) {
    return (
      <div className="loading-screen">
        <div className="spinner"></div>
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</p>
      </div>
    );
  }

  return (
    <AppContext.Provider value={contextValue}>
      <div className="app">
        {/* Navigation */}
        <nav className="navbar">
          <div className="container">
            <div className="nav-brand">
              {config.imageLogo && (
                <img 
                  src={config.imageLogo} 
                  alt="‡πÇ‡∏•‡πÇ‡∏Å‡πâ" 
                  className="nav-logo"
                />
              )}
              <div className="nav-text">
                <h1 onClick={() => navigate('home')}>{config.appName}</h1>
                <span>{config.collegeName}</span>
              </div>
            </div>
            <div className="nav-menu">
              <button 
                onClick={() => navigate('home')} 
                className={currentPage === 'home' ? 'active' : ''}
              >
                ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
              </button>
              <button 
                onClick={() => navigate('register')} 
                className={currentPage === 'register' ? 'active' : ''}
              >
                ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô
              </button>
              <button 
                onClick={() => navigate('check-status')} 
                className={currentPage === 'check-status' ? 'active' : ''}
              >
                ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
              </button>
              {user ? (
                <button onClick={() => navigate('admin')} className="btn-admin">
                  ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
                </button>
              ) : (
                <button onClick={() => navigate('login')} className="btn-login">
                  ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö
                </button>
              )}
            </div>
          </div>
        </nav>

        {/* Main Content */}
        <main className="main-content">
          {currentPage === 'home' && <LandingPage onNavigate={navigate} />}
          {currentPage === 'register' && <AlumniRegistration onNavigate={navigate} />}
          {currentPage === 'check-status' && <StatusCheck onNavigate={navigate} initialIdCard={registeredIdCard} />}
        </main>

        {/* Footer */}
        <footer className="footer">
          <div className="container">
            <div className="footer-content">
              <div className="footer-section">
                <h3>{config.collegeName}</h3>
                <p>‡∏™‡∏°‡∏≤‡∏Ñ‡∏°‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤</p>
                <p>{config.collegeAddress}</p>
                <p>‡πÇ‡∏ó‡∏£: {config.collegePhone}</p>
              </div>
              <div className="footer-section">
                <h4>‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏≤</h4>
                <p>‡πÇ‡∏ó‡∏£: {config.collegePhone}</p>
                <p>‡∏≠‡∏µ‡πÄ‡∏°‡∏•: alumni@utc.ac.th</p>
                <p>‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå: www.utc.ac.th</p>
              </div>
              <div className="footer-section">
                <h4>‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏ä‡∏ô‡πå</h4>
                <p>‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢</p>
                <p>Facebook Page</p>
                <p>‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å</p>
              </div>
            </div>
            <div className="footer-bottom">
              <p>&copy; 2025 {config.collegeName} ‡∏™‡∏á‡∏ß‡∏ô‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå</p>
              <p>‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢: {config.devName}</p>
            </div>
          </div>
        </footer>
      </div>
    </AppContext.Provider>
  );
};

export default App;