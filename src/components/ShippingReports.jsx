// üìÅ ShippingReports.jsx - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Export Function ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Token ‚úÖ
import React, { useState, useEffect } from 'react';
import "./ShippingReports.css"
import {
  Box,
  Card,
  CardContent,
  Typography,
  Grid,
  TextField,
  MenuItem,
  Button,
  Chip,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Paper,
  TablePagination,
  CircularProgress,
  Alert
} from '@mui/material';
import {
  FileDownload,
  Search,
  FilterList,
  LocalShipping,
  CheckCircle,
  Schedule,
  Cancel
} from '@mui/icons-material';

// üöÄ ‡πÅ‡∏Å‡πâ: ‡∏£‡∏±‡∏ö props ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å AdminSystem
const ShippingReports = ({ user, onLogout, onNavigate }) => {
  // üîç ‡πÄ‡∏û‡∏¥‡πà‡∏° console.log ‡πÄ‡∏û‡∏∑‡πà‡∏≠ debug
  console.log("üöÄ ShippingReports component loaded!");
  console.log("üìã Props received:", { user: !!user, onLogout: !!onLogout, onNavigate: !!onNavigate });

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  const [shippingData, setShippingData] = useState([]);
  const [statistics, setStatistics] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Filters
  const [filters, setFilters] = useState({
    shippingStatus: '',
    department: '',
    graduationYear: '',
    search: ''
  });

  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Pagination
  const [page, setPage] = useState(0);
  const [rowsPerPage, setRowsPerPage] = useState(10);
  const [totalCount, setTotalCount] = useState(0);

  // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API
  const fetchShippingData = async () => {
    setLoading(true);
    setError(null);
    
    try {
      const queryParams = new URLSearchParams({
        page: page + 1,
        limit: rowsPerPage,
        ...Object.fromEntries(
          Object.entries(filters).filter(([_, value]) => value !== '')
        )
      });

      // üöÄ ‡πÅ‡∏Å‡πâ: ‡πÉ‡∏ä‡πâ VITE_API_URL ‡πÅ‡∏•‡∏∞ adminToken
      const apiUrl = `${import.meta.env.VITE_API_URL}/api/shipping/reports/detailed?${queryParams}`;
      
    
      const token = localStorage.getItem('adminToken'); 
      
      console.log("üì° Fetching from:", apiUrl);
      console.log("üîë Using token:", token ? "Token exists" : "No token");

      const response = await fetch(apiUrl, {
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      console.log("üì° Response status:", response.status);

      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå API Error:", errorText);
        throw new Error(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${response.status}`);
      }

      const data = await response.json();
      console.log("üìä Data received:", data);
      
      setShippingData(data.data?.shipments || []);
      setStatistics(data.data?.statistics);
      setTotalCount(data.data?.totalShipments || 0);
    } catch (err) {
      console.error("‚ùå fetchShippingData error:", err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠ component mount ‡∏´‡∏£‡∏∑‡∏≠ filters ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô
  useEffect(() => {
    console.log("üîÑ useEffect triggered - fetching data...");
    fetchShippingData();
  }, [page, rowsPerPage, filters]);

  // Handle filter change
  const handleFilterChange = (field, value) => {
    console.log(`üîç Filter changed: ${field} = ${value}`);
    setFilters(prev => ({ ...prev, [field]: value }));
    setPage(0); // Reset to first page
  };

  // üî• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Handle export - ‡πÉ‡∏ä‡πâ fetch + blob download ‡πÅ‡∏ó‡∏ô window.open
  const handleExport = async (exportType) => {
    try {
      setLoading(true);
      
      const queryParams = new URLSearchParams({
        ...Object.fromEntries(
          Object.entries(filters).filter(([_, value]) => value !== '')
        ),
        fileName: `${exportType}-${new Date().toISOString().split('T')[0]}.xlsx`
      });

      // üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á endpoint URL
      const endpoint = exportType === 'shipping-list' 
        ? `${import.meta.env.VITE_API_URL}/api/shipping/export/shipping-list`
        : `${import.meta.env.VITE_API_URL}/api/shipping/export/excel`;

      const url = `${endpoint}?${queryParams}`;
      console.log("üì§ Exporting to:", url);

      // üî• ‡πÉ‡∏ä‡πâ fetch ‡πÅ‡∏ó‡∏ô window.open ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á token
      const token = localStorage.getItem('adminToken');
      
      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}` // ‚úÖ ‡∏™‡πà‡∏á token ‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢!
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå Export error response:", errorText);
        throw new Error(`Export failed: ${response.status} - ${errorText}`);
      }

      // üî• ‡πÅ‡∏õ‡∏•‡∏á response ‡πÄ‡∏õ‡πá‡∏ô blob
      const blob = await response.blob();
      
      // üî• ‡∏™‡∏£‡πâ‡∏≤‡∏á download link
      const downloadUrl = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = downloadUrl;
      a.download = `${exportType}-${new Date().toISOString().split('T')[0]}.xlsx`;
      
      // üî• ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ download
      document.body.appendChild(a);
      a.click();
      
      // üî• ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î
      document.body.removeChild(a);
      window.URL.revokeObjectURL(downloadUrl);
      
      console.log("‚úÖ Export completed successfully!");
      
    } catch (err) {
      console.error("‚ùå Export error:", err);
      setError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Export: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö export ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  const handleMemberExport = async () => {
    try {
      setLoading(true);
      
      const token = localStorage.getItem('adminToken');
      const url = `${import.meta.env.VITE_API_URL}/api/alumni/export/all-members-excel`;
      
      console.log("üì§ Exporting all members to:", url);
      
      const response = await fetch(url, {
        method: 'GET', 
        headers: {
          'Authorization': `Bearer ${token}`
        }
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error("‚ùå Member export error response:", errorText);
        throw new Error(`Export failed: ${response.status} - ${errorText}`);
      }

      const blob = await response.blob();
      const downloadUrl = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = downloadUrl;
      a.download = `‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î-${new Date().toISOString().split('T')[0]}.xlsx`;
      
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(downloadUrl);
      
      console.log("‚úÖ Member export completed successfully!");
      
    } catch (err) {
      console.error("‚ùå Member export error:", err);
      setError(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ Export ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å: ${err.message}`);
    } finally {
      setLoading(false);
    }
  };

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á Status Chip
  const getStatusChip = (status) => {
    const statusConfig = {
      '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á': { color: 'warning', icon: <Schedule /> },
      '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á': { color: 'info', icon: <LocalShipping /> },
      '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß': { color: 'success', icon: <CheckCircle /> },
      '‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á': { color: 'default', icon: <Cancel /> }
    };

    const config = statusConfig[status] || { color: 'default', icon: null };
    return (
      <Chip
        label={status}
        color={config.color}
        icon={config.icon}
        size="small"
        className="status-chip"
      />
    );
  };

  return (
    <div className="shipping-reports-container">
      {/* üöÄ ‡πÄ‡∏û‡∏¥‡πà‡∏° Header Section ‡πÅ‡∏ö‡∏ö Admin */}
      <header className="admin-header">
        <div className="admin-header-container">
          <div>
            <h1 className="admin-header-title">üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h1>
            <p className="admin-header-subtitle">
              ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏®‡∏¥‡∏©‡∏¢‡πå‡πÄ‡∏Å‡πà‡∏≤
            </p>
          </div>
          <div className="admin-header-user">
            {/* üöÄ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏∏‡πà‡∏°‡∏Å‡∏•‡∏±‡∏ö */}
            <button 
              onClick={() => onNavigate && onNavigate('admin-dashboard')}
              className="btn btn-outline btn-sm"
              style={{ marginRight: '12px' }}
            >
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
            </button>
            <span className="admin-user-info">
              ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {user?.username || user?.name || user?.email || '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'}
            </span>
            <button onClick={onLogout} className="admin-logout-btn">
              ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="admin-main">
        {/* Debug Info */}
        <div style={{ 
          background: '#f0f0f0', 
          padding: '12px', 
          marginBottom: '16px', 
          borderRadius: '4px',
          fontSize: '12px',
          color: '#666'
        }}>
          üîç Debug: Component loaded | API: {import.meta.env.VITE_API_URL} | Token: {localStorage.getItem('adminToken') ? '‚úÖ' : '‚ùå'}
        </div>

        {/* Statistics Cards */}
        {statistics && (
          <Grid container spacing={3} className="stats-grid">
            <Grid item xs={12} sm={6} md={3}>
              <Card className="stat-card warning">
                <CardContent>
                  <Box className="stat-content">
                    <Schedule className="stat-icon" />
                    <Box>
                      <Typography variant="h4">
                        {statistics.statusBreakdown?.['‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'] || 0}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
                      </Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <Card className="stat-card info">
                <CardContent>
                  <Box className="stat-content">
                    <LocalShipping className="stat-icon" />
                    <Box>
                      <Typography variant="h4">
                        {statistics.statusBreakdown?.['‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'] || 0}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
                      </Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <Card className="stat-card success">
                <CardContent>
                  <Box className="stat-content">
                    <CheckCircle className="stat-icon" />
                    <Box>
                      <Typography variant="h4">
                        {statistics.statusBreakdown?.['‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß'] || 0}
                      </Typography>
                      <Typography variant="body2" color="text.secondary">
                        ‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
                      </Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>

            <Grid item xs={12} sm={6} md={3}>
              <Card className="stat-card primary">
                <CardContent>
                  <Box className="stat-content">
                    <FilterList className="stat-icon" />
                    <Box>
                      <Typography variant="h4">{totalCount}</Typography>
                      <Typography variant="body2" color="text.secondary">
                        ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
                      </Typography>
                    </Box>
                  </Box>
                </CardContent>
              </Card>
            </Grid>
          </Grid>
        )}

        {/* Filters */}
        <Card className="filter-card">
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üîç ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </Typography>
            
            <Grid container spacing={2}>
              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  select
                  label="‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"
                  value={filters.shippingStatus}
                  onChange={(e) => handleFilterChange('shippingStatus', e.target.value)}
                  size="small"
                >
                  <MenuItem value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</MenuItem>
                  <MenuItem value="‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á">‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</MenuItem>
                  <MenuItem value="‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</MenuItem>
                  <MenuItem value="‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß">‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</MenuItem>
                </TextField>
              </Grid>

              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  select
                  label="‡πÅ‡∏ú‡∏ô‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤"
                  value={filters.department}
                  onChange={(e) => handleFilterChange('department', e.target.value)}
                  size="small"
                >
                  <MenuItem value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</MenuItem>
                  <MenuItem value="‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®">‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ‡∏™‡∏≤‡∏£‡∏™‡∏ô‡πÄ‡∏ó‡∏®</MenuItem>
                  <MenuItem value="‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</MenuItem>
                  <MenuItem value="‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î">‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î</MenuItem>
                  <MenuItem value="‡∏ä‡πà‡∏≤‡∏á‡∏¢‡∏ô‡∏ï‡πå">‡∏ä‡πà‡∏≤‡∏á‡∏¢‡∏ô‡∏ï‡πå</MenuItem>
                </TextField>
              </Grid>

              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  select
                  label="‡∏õ‡∏µ‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
                  value={filters.graduationYear}
                  onChange={(e) => handleFilterChange('graduationYear', e.target.value)}
                  size="small"
                >
                  <MenuItem value="">‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</MenuItem>
                  <MenuItem value="2567">2567</MenuItem>
                  <MenuItem value="2566">2566</MenuItem>
                  <MenuItem value="2565">2565</MenuItem>
                  <MenuItem value="2564">2564</MenuItem>
                </TextField>
              </Grid>

              <Grid item xs={12} sm={6} md={3}>
                <TextField
                  fullWidth
                  label="‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤"
                  placeholder="‡∏ä‡∏∑‡πà‡∏≠, ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£, ‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"
                  value={filters.search}
                  onChange={(e) => handleFilterChange('search', e.target.value)}
                  size="small"
                  InputProps={{
                    startAdornment: <Search className="search-icon" />
                  }}
                />
              </Grid>
            </Grid>
          </CardContent>
        </Card>

        {/* Export Buttons */}
        <Card className="export-card">
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            </Typography>
            
            <Box className="export-buttons">
              <Button
                variant="contained"
                startIcon={<FileDownload />}
                onClick={() => handleExport('shipping-list')}
                className="export-btn primary"
                disabled={loading}
              >
                üìã ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
              </Button>
              
              <Button
                variant="contained"
                startIcon={<FileDownload />}
                onClick={() => handleExport('shipping-report')}
                className="export-btn success"
                disabled={loading}
              >
                üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </Button>
              
              <Button
                variant="outlined"
                startIcon={<FileDownload />}
                onClick={handleMemberExport}
                className="export-btn info"
                disabled={loading}
              >
                üë• ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
              </Button>
            </Box>
          </CardContent>
        </Card>

        {/* Error Display */}
        {error && (
          <Alert severity="error" onClose={() => setError(null)}>
            {error}
          </Alert>
        )}

        {/* Data Table */}
        <Card className="table-card">
          <CardContent>
            <Typography variant="h6" gutterBottom>
              üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
            </Typography>

            {loading ? (
              <Box className="loading-container">
                <CircularProgress />
                <Typography>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</Typography>
              </Box>
            ) : (
              <>
                <TableContainer component={Paper} className="table-container">
                  <Table stickyHeader>
                    <TableHead>
                      <TableRow>
                        <TableCell>‡∏•‡∏≥‡∏î‡∏±‡∏ö</TableCell>
                        <TableCell>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</TableCell>
                        <TableCell>‡πÅ‡∏ú‡∏ô‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤</TableCell>
                        <TableCell>‡∏õ‡∏µ</TableCell>
                        <TableCell>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</TableCell>
                        <TableCell>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</TableCell>
                        <TableCell>‡πÄ‡∏•‡∏Ç‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°</TableCell>
                        <TableCell>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</TableCell>
                      </TableRow>
                    </TableHead>
                    <TableBody>
                      {shippingData.map((item, index) => (
                        <TableRow key={item._id} hover>
                          <TableCell>{page * rowsPerPage + index + 1}</TableCell>
                          <TableCell className="name-cell">
                            <Typography variant="body2" fontWeight="medium">
                              {`${item.firstName} ${item.lastName}`}
                            </Typography>
                          </TableCell>
                          <TableCell>{item.department}</TableCell>
                          <TableCell>{item.graduationYear}</TableCell>
                          <TableCell>{item.phone}</TableCell>
                          <TableCell>
                            {getStatusChip(item.shippingStatus)}
                          </TableCell>
                          <TableCell>
                            {item.trackingNumber || '-'}
                          </TableCell>
                          <TableCell>
                            {item.shippedDate 
                              ? new Date(item.shippedDate).toLocaleDateString('th-TH')
                              : '-'
                            }
                          </TableCell>
                        </TableRow>
                      ))}

                      {shippingData.length === 0 && !loading && (
                        <TableRow>
                          <TableCell colSpan={8} align="center">
                            <Typography color="text.secondary">
                              ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
                            </Typography>
                          </TableCell>
                        </TableRow>
                      )}
                    </TableBody>
                  </Table>
                </TableContainer>

                <TablePagination
                  component="div"
                  count={totalCount}
                  page={page}
                  onPageChange={(e, newPage) => setPage(newPage)}
                  rowsPerPage={rowsPerPage}
                  onRowsPerPageChange={(e) => {
                    setRowsPerPage(parseInt(e.target.value, 10));
                    setPage(0);
                  }}
                  rowsPerPageOptions={[10, 25, 50, 100]}
                  labelRowsPerPage="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤:"
                  labelDisplayedRows={({ from, to, count }) =>
                    `${from}-${to} ‡∏à‡∏≤‡∏Å ${count !== -1 ? count : `‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ ${to}`}`
                  }
                />
              </>
            )}
          </CardContent>
        </Card>
      </main>
    </div>
  );
};

export default ShippingReports;