// src/components/ShippingQueue.jsx - ‡πÅ‡∏Å‡πâ API ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏° backend
import React, { useState, useEffect } from 'react';
import LabelPrinter from './LabelPrinter';

const ShippingQueue = ({ user, onLogout, onNavigate }) => {
  const [queue, setQueue] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedItems, setSelectedItems] = useState([]);
  const [filters, setFilters] = useState({
    department: '',
    graduationYear: '',
    search: ''
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  
  // State ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LabelPrinter
  const [showLabelModal, setShowLabelModal] = useState(false);
  const [labelType, setLabelType] = useState('minimal');
  const [currentPrintBatch, setCurrentPrintBatch] = useState([]);
  const [printQueue, setPrintQueue] = useState([]);
  const [showBatchModal, setShowBatchModal] = useState(false);

  useEffect(() => {
    fetchShippingQueue();
  }, [currentPage, filters]);

  const fetchShippingQueue = async () => {
    setLoading(true);
    try {
      const token = localStorage.getItem('adminToken');
      
      // üî• ‡πÅ‡∏Å‡πâ: ‡πÉ‡∏ä‡πâ shipping-list API
      const queryParams = new URLSearchParams();
      queryParams.append('page', currentPage.toString());
      queryParams.append('limit', '10');
      queryParams.append('shippingStatus', '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'); // ‡πÉ‡∏ä‡πâ shippingStatus ‡πÅ‡∏ó‡∏ô status

      if (filters.search.trim()) {
        queryParams.append('search', filters.search.trim());
      }
      if (filters.department) {
        queryParams.append('department', filters.department);
      }
      if (filters.graduationYear) {
        queryParams.append('graduationYear', filters.graduationYear);
      }

      const url = `${import.meta.env.VITE_API_URL}/api/alumni/shipping-list?${queryParams.toString()}`;
      console.log('üîç Fetching shipping queue:', url);

      const response = await fetch(url, {
        headers: { 
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });
      
      if (response.ok) {
        const data = await response.json();
        console.log('üì¶ Queue data received:', data);
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å shipping-list API ‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
        const queueData = data.data || [];
        const totalPages = data.totalPages || Math.ceil((data.total || queueData.length) / 10);
        
        setQueue(queueData);
        setTotalPages(totalPages);
        
        console.log(`üìã Shipping queue: ${queueData.length} items ready to ship`);
      } else {
        console.error('‚ùå Failed to fetch shipping queue:', response.status);
        setQueue([]);
        setTotalPages(1);
      }
    } catch (error) {
      console.error('‚ùå Error fetching shipping queue:', error);
      setQueue([]);
      setTotalPages(1);
    } finally {
      setLoading(false);
    }
  };

  const handleSelectAll = () => {
    if (selectedItems.length === queue.length) {
      setSelectedItems([]);
    } else {
      setSelectedItems(queue.map(item => item._id));
    }
  };

  const handleSelectItem = (itemId) => {
    if (selectedItems.includes(itemId)) {
      setSelectedItems(selectedItems.filter(id => id !== itemId));
    } else {
      setSelectedItems([...selectedItems, itemId]);
    }
  };

  // üî• ‡πÅ‡∏Å‡πâ: ‡πÉ‡∏ä‡πâ bulk-shipping API
  const handleBulkUpdateStatus = async (newStatus) => {
    if (selectedItems.length === 0) {
      showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï', 'error');
      return;
    }

    try {
      const token = localStorage.getItem('adminToken');
      
      const response = await fetch(`${import.meta.env.VITE_API_URL}/api/alumni/bulk-shipping`, {
        method: 'POST', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å PATCH ‡πÄ‡∏õ‡πá‡∏ô POST
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          alumniIds: selectedItems, // ‡∏ñ‡∏π‡∏Å‡πÅ‡∏•‡πâ‡∏ß
          shippingStatus: newStatus, // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡πÉ‡∏ô shippingData
          notes: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å Shipping Queue - ${new Date().toLocaleDateString('th-TH')}`
        })
      });

      if (response.ok) {
        const result = await response.json();
        showToast(`‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ ${selectedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß`, 'success');
        setSelectedItems([]);
        fetchShippingQueue(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      } else {
        const errorData = await response.json();
        showToast(errorData.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ', 'error');
        console.error('Bulk update error:', errorData);
      }
    } catch (error) {
      console.error('Error updating bulk status:', error);
      showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞', 'error');
    }
  };

  const showToast = (message, type = 'info') => {
    const toast = document.createElement('div');
    toast.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 12px 20px;
      border-radius: 8px;
      color: white;
      font-weight: 500;
      z-index: 10000;
      animation: slideIn 0.3s ease;
      ${type === 'success' ? 'background: #28a745;' : 
        type === 'error' ? 'background: #dc3545;' : 
        'background: #17a2b8;'}
    `;
    toast.textContent = message;
    document.body.appendChild(toast);
    
    setTimeout(() => {
      toast.style.animation = 'slideOut 0.3s ease';
      setTimeout(() => {
        if (document.body.contains(toast)) {
          document.body.removeChild(toast);
        }
      }, 300);
    }, 3000);
  };

  const handleClearFilters = () => {
    setFilters({
      department: '',
      graduationYear: '',
      search: ''
    });
    setCurrentPage(1);
  };

  // üî• ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡πâ‡∏ô Label ‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ 5+ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ
  const handlePrintLabels = (type) => {
    if (selectedItems.length === 0) {
      showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡πâ‡∏ô label', 'error');
      return;
    }

    console.log('üñ®Ô∏è Print request:', { type, count: selectedItems.length });

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 4up ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 4
    if (type === '4up' && selectedItems.length > 4) {
      handleBatchPrint(type);
      return;
    }

    // ‡∏õ‡∏Å‡∏ï‡∏¥
    setCurrentPrintBatch(selectedItems);
    setLabelType(type);
    setShowLabelModal(true);
  };

  // üî• ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÅ‡∏ö‡∏ö batch ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 4up
  const handleBatchPrint = (type) => {
    const batches = [];
    const itemsCopy = [...selectedItems];

    // ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batch ‡∏•‡∏∞ 4
    while (itemsCopy.length > 0) {
      const batch = itemsCopy.splice(0, 4);
      batches.push(batch);
    }

    console.log('üì¶ Created batches:', batches);

    if (batches.length === 1) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÅ‡∏Ñ‡πà batch ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥
      setCurrentPrintBatch(batches[0]);
      setLabelType(type);
      setShowLabelModal(true);
    } else {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢ batch ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
      setPrintQueue(batches);
      setLabelType(type);
      setShowBatchModal(true);
    }
  };

  // üî• ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡∏•‡∏∞ batch
  const handlePrintBatch = async (batchIndex) => {
    const batch = printQueue[batchIndex];
    if (!batch || batch.length === 0) return;

    console.log(`üñ®Ô∏è Printing batch ${batchIndex + 1}:`, batch);

    setCurrentPrintBatch(batch);
    setShowBatchModal(false);
    setShowLabelModal(true);
  };

  // üî• ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏∏‡∏Å batch ‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  const handlePrintAllBatches = async () => {
    showToast(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏¥‡πâ‡∏ô ${printQueue.length} ‡∏ä‡∏∏‡∏î`, 'info');
    setShowBatchModal(false);

    // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á await)
    let successCount = 0;
    
    printQueue.forEach((batch, index) => {
      console.log(`üñ®Ô∏è Opening print window for batch ${index + 1}/${printQueue.length}:`, batch);
      
      // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ó‡∏µ‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà await
      setTimeout(() => {
        printBatchDirectly(batch, index + 1)
          .then(() => {
            successCount++;
            console.log(`‚úÖ Batch ${index + 1} opened successfully`);
            
            // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ä‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
            if (successCount === printQueue.length) {
              showToast(`‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏Ñ‡∏£‡∏ö ${printQueue.length} ‡∏ä‡∏∏‡∏î‡πÅ‡∏•‡πâ‡∏ß`, 'success');
            }
          })
          .catch((error) => {
            console.error(`‚ùå Failed to open batch ${index + 1}:`, error);
            showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà ${index + 1}`, 'error');
          });
      }, index * 800); // ‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á 800ms ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á
    });

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
    setTimeout(() => {
      setPrintQueue([]);
      setSelectedItems([]);
    }, printQueue.length * 800 + 1000);
  };

  // üî• ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏¥‡πâ‡∏ô batch ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ return Promise)
  const printBatchDirectly = async (batch, batchNumber) => {
    return new Promise(async (resolve, reject) => {
      try {
        const token = localStorage.getItem('adminToken');
        
        let printUrl = `${import.meta.env.VITE_API_URL}/api/shipping/labels/4up?format=html`;
        
        const response = await fetch(printUrl, {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${token}`,
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
            alumniIds: batch.slice(0, 4) // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô 4
          })
        });

        if (response.ok) {
          const htmlContent = await response.text();
          
          // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          const printWindow = window.open('', '_blank', 'width=800,height=600,scrollbars=yes');
          
          if (printWindow) {
            printWindow.document.open();
            printWindow.document.write(htmlContent);
            printWindow.document.close();
            
            // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô title ‡πÉ‡∏´‡πâ‡πÄ‡∏´‡πá‡∏ô‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô batch ‡πÑ‡∏´‡∏ô
            printWindow.document.title = `Label Batch ${batchNumber} (${batch.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)`;
            
            printWindow.onload = () => {
              setTimeout(() => {
                printWindow.print();
                resolve(); // ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
              }, 500);
            };
            
            // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ onload ‡πÉ‡∏´‡πâ resolve ‡∏´‡∏•‡∏±‡∏á 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            setTimeout(() => {
              resolve();
            }, 1000);
            
            console.log(`‚úÖ Opened print window for batch ${batchNumber}`);
          } else {
            reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÑ‡∏î‡πâ (popup ‡∏ñ‡∏π‡∏Å‡∏ö‡∏•‡πá‡∏≠‡∏Å)'));
          }
        } else {
          reject(new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏¥‡πâ‡∏ô batch ${batchNumber} ‡πÑ‡∏î‡πâ`));
        }
      } catch (error) {
        console.error(`‚ùå Error printing batch ${batchNumber}:`, error);
        reject(error);
      }
    });
  };

  // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö single label
  const handlePrintSingleLabel = (alumniId, type = 'minimal') => {
    console.log('üñ®Ô∏è Printing single label:', { alumniId, type });
    setCurrentPrintBatch([alumniId]);
    setLabelType(type);
    setShowLabelModal(true);
  };

  // üî• Callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à
  const handlePrintComplete = (printedIds) => {
    console.log('‚úÖ Print completed for:', printedIds);
    
    // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ queue ‡∏≠‡∏¢‡∏π‡πà ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πâ‡∏≤‡∏á selectedItems
    if (printQueue.length === 0) {
      setSelectedItems([]);
    }
  };

  // üî• ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  const getSelectedItemsInfo = () => {
    if (selectedItems.length === 0) return '';
    
    if (selectedItems.length <= 4) {
      return `${selectedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`;
    } else {
      const batches = Math.ceil(selectedItems.length / 4);
      return `${selectedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÅ‡∏ö‡πà‡∏á ${batches} ‡∏ä‡∏∏‡∏î)`;
    }
  };

  return (
    <div className="admin-layout">
      {/* Header */}
      <header className="admin-header">
        <div className="admin-header-container">
          <div>
            <button 
              className="btn-back"
              onClick={() => onNavigate('admin-shipping-dashboard')}
            >
              ‚Üê ‡∏Å‡∏•‡∏±‡∏ö‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î
            </button>
            <h1 className="admin-header-title">üìã ‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</h1>
            <p className="admin-header-subtitle">‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏à‡∏±‡∏î‡∏™‡πà‡∏á</p>
          </div>
          <div className="admin-header-user">
            <span className="admin-user-info">
              ‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ, {user?.username || user?.name || user?.email || '‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö'}
            </span>
            <button onClick={onLogout} className="admin-logout-btn">
              ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
            </button>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="admin-main">
        {/* üî• Enhanced Bulk Actions - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô */}
        {selectedItems.length > 0 && (
          <div className="bulk-actions">
            <div className="bulk-actions-info">
              <span>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß {getSelectedItemsInfo()}</span>
              {selectedItems.length > 4 && (
                <span className="bulk-info-note">
                  üí° Label A4 ‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô {Math.ceil(selectedItems.length / 4)} ‡∏ä‡∏∏‡∏î
                </span>
              )}
            </div>
            <div className="bulk-actions-buttons">
              <button
                className="btn btn-outline btn-sm"
                onClick={() => handlePrintLabels('4up')}
              >
                üìÑ ‡∏õ‡∏£‡∏¥‡πâ‡∏ô Label A4
                {selectedItems.length > 4 && (
                  <span className="batch-count">
                    ({Math.ceil(selectedItems.length / 4)} ‡∏ä‡∏∏‡∏î)
                  </span>
                )}
              </button>
              <button
                className="btn btn-success btn-sm"
                onClick={() => handleBulkUpdateStatus('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á')}
              >
                üì¶ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏õ‡πá‡∏ô "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á"
              </button>
              <button
                className="btn btn-outline btn-sm"
                onClick={() => setSelectedItems([])}
              >
                ‡∏•‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
              </button>
            </div>
          </div>
        )}

        {/* Filters */}
        <div className="admin-filters">
          <div className="admin-filters-grid">
            <div className="admin-filter-group">
              <label className="admin-filter-label">‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤</label>
              <input
                type="text"
                placeholder="‡∏ä‡∏∑‡πà‡∏≠, ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•, ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£"
                className="admin-filter-input"
                value={filters.search}
                onChange={(e) => setFilters({...filters, search: e.target.value})}
              />
            </div>
            
            <div className="admin-filter-group">
              <label className="admin-filter-label">‡∏™‡∏≤‡∏Ç‡∏≤‡∏ß‡∏¥‡∏ä‡∏≤</label>
              <select
                className="admin-filter-input"
                value={filters.department}
                onChange={(e) => setFilters({...filters, department: e.target.value})}
              >
                <option value="">‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤</option>
                <option value="‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à">‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à</option>
                <option value="‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ">‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ</option>
                <option value="‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î">‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≤‡∏î</option>
                <option value="‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå">‡∏≠‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏£‡∏≠‡∏ô‡∏¥‡∏Å‡∏™‡πå</option>
              </select>
            </div>
            
            <div className="admin-filter-group">
              <label className="admin-filter-label">‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏à‡∏ö</label>
              <select
                className="admin-filter-input"
                value={filters.graduationYear}
                onChange={(e) => setFilters({...filters, graduationYear: e.target.value})}
              >
                <option value="">‡∏ó‡∏∏‡∏Å‡∏õ‡∏µ</option>
                <option value="2567">2567</option>
                <option value="2566">2566</option>
                <option value="2565">2565</option>
                <option value="2564">2564</option>
                <option value="2563">2563</option>
              </select>
            </div>
            
            <div className="admin-filter-group">
              <button
                onClick={handleClearFilters}
                className="admin-clear-btn"
              >
                ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á
              </button>
            </div>
          </div>
        </div>

        {/* Queue Table */}
        <div className="admin-table-container">
          {loading ? (
            <div className="admin-loading">
              <div className="spinner"></div>
              <p className="admin-loading-text">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏¥‡∏ß‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á...</p>
            </div>
          ) : (
            <>
              <table className="admin-table">
                <thead>
                  <tr>
                    <th style={{ width: '50px' }}>
                      <input
                        type="checkbox"
                        checked={selectedItems.length === queue.length && queue.length > 0}
                        onChange={handleSelectAll}
                      />
                    </th>
                    <th>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</th>
                    <th>‡∏™‡∏≤‡∏Ç‡∏≤/‡∏õ‡∏µ</th>
                    <th>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</th>
                    <th>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£</th>
                    <th>‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥</th>
                    <th>‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                  </tr>
                </thead>
                <tbody>
                  {queue.length > 0 ? (
                    queue.map((item) => (
                      <tr key={item._id}>
                        <td>
                          <input
                            type="checkbox"
                            checked={selectedItems.includes(item._id)}
                            onChange={() => handleSelectItem(item._id)}
                          />
                        </td>
                        <td>
                          <div className="alumni-name">
                            {item.firstName} {item.lastName}
                          </div>
                          <div className="alumni-id">
                            ID: {item.idCard?.substring(0, 4)}****{item.idCard?.substring(9)}
                          </div>
                        </td>
                        <td>
                          <div className="alumni-education">
                            {item.department}
                          </div>
                          <div className="alumni-year">‡∏£‡∏∏‡πà‡∏ô {item.graduationYear}</div>
                        </td>
                        <td>
                          <div className="alumni-address">
                            {item.address?.length > 50 
                              ? `${item.address.substring(0, 50)}...` 
                              : item.address}
                          </div>
                        </td>
                        <td>
                          <div className="alumni-contact">{item.phone}</div>
                        </td>
                        <td>
                          {item.statusHistory?.length > 0 
                            ? new Date(item.statusHistory.find(h => h.status === '‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥')?.updatedAt || item.updatedAt).toLocaleDateString('th-TH')
                            : new Date(item.updatedAt).toLocaleDateString('th-TH')
                          }
                        </td>
                        <td>
                          <div className="table-actions">
                            <button
                              className="action-btn action-btn-sm"
                              onClick={() => handlePrintSingleLabel(item._id, 'minimal')}
                              title="‡∏õ‡∏£‡∏¥‡πâ‡∏ô Label ‡πÄ‡∏•‡πá‡∏Å"
                            >
                              üè∑Ô∏è Label
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="7" style={{ textAlign: 'center', padding: 'var(--spacing-2xl)' }}>
                        <div className="admin-loading-text">
                          {Object.values(filters).some(v => v) 
                            ? '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤' 
                            : '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á'
                          }
                        </div>
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>

              {/* Pagination */}
              {totalPages > 1 && (
                <div className="admin-pagination">
                  <div className="pagination-info">
                    <p>‡∏´‡∏ô‡πâ‡∏≤ {currentPage} ‡∏à‡∏≤‡∏Å {totalPages}</p>
                  </div>
                  <div className="pagination-controls">
                    <button
                      onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
                      disabled={currentPage === 1}
                      className="pagination-btn"
                    >
                      ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                    </button>
                    <button
                      onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
                      disabled={currentPage === totalPages}
                      className="pagination-btn"
                    >
                      ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
                    </button>
                  </div>
                </div>
              )}
            </>
          )}
        </div>
      </main>

      {/* üî• LabelPrinter Modal */}
      {showLabelModal && (
        <LabelPrinter
          isOpen={showLabelModal}
          onClose={() => setShowLabelModal(false)}
          selectedAlumni={currentPrintBatch}
          labelType={labelType}
          onPrintComplete={handlePrintComplete}
        />
      )}

      {/* üî• Batch Selection Modal - ‡πÉ‡∏´‡∏°‡πà! */}
      {showBatchModal && (
        <div className="modal-backdrop">
          <div className="modal-container">
            <div className="modal-header">
              <h2 className="modal-title">üì¶ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏¥‡πâ‡∏ô</h2>
              <button
                onClick={() => setShowBatchModal(false)}
                className="modal-close"
              >
                √ó
              </button>
            </div>

            <div className="modal-content">
              <div className="batch-info">
                <p className="batch-summary">
                  <strong>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ {selectedItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</strong><br/>
                  ‡∏à‡∏∞‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô <strong>{printQueue.length} ‡∏ä‡∏∏‡∏î</strong> (‡∏ä‡∏∏‡∏î‡∏•‡∏∞ 4 ‡∏Ñ‡∏ô)
                </p>
                
                {/* üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô */}
                <div className="batch-warning" style={{
                  backgroundColor: '#fff3cd',
                  padding: '12px',
                  borderRadius: '8px',
                  border: '1px solid #ffeaa7',
                  marginTop: '12px'
                }}>
                  <div style={{ color: '#856404', fontSize: '14px' }}>
                    <strong>üìã ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ä‡∏∏‡∏î:</strong>
                    <ul style={{ margin: '8px 0', paddingLeft: '20px', lineHeight: '1.6' }}>
                      {printQueue.map((batch, index) => (
                        <li key={index}>
                          <strong>‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà {index + 1}:</strong> {batch.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                          {batch.length === 4 ? ' (‡πÄ‡∏ï‡πá‡∏°)' : ' (‡πÑ‡∏°‡πà‡πÄ‡∏ï‡πá‡∏°)'}
                        </li>
                      ))}
                    </ul>
                    <p style={{ margin: '8px 0 0 0', fontSize: '13px', fontStyle: 'italic' }}>
                      üí° Label A4 (4-up) ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÅ‡∏Ñ‡πà 4 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡∏ä‡∏∏‡∏î ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏© A4
                    </p>
                  </div>
                </div>
              </div>

              <div className="batch-options">
                <h3>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£:</h3>
                
                <button
                  className="btn btn-primary btn-large"
                  onClick={handlePrintAllBatches}
                  style={{ marginBottom: '16px', width: '100%' }}
                >
                  üñ®Ô∏è ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏∏‡∏Å‡∏ä‡∏∏‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô ({printQueue.length} ‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á)
                  <div style={{ fontSize: '12px', fontWeight: 'normal', marginTop: '4px' }}>
                    ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏∞‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 0.8 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                  </div>
                </button>

                <div className="batch-list">
                  <h4>‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ó‡∏µ‡∏•‡∏∞‡∏ä‡∏∏‡∏î:</h4>
                  {printQueue.map((batch, index) => (
                    <div key={index} className="batch-item" style={{
                      display: 'flex',
                      justifyContent: 'space-between',
                      alignItems: 'center',
                      padding: '12px',
                      marginBottom: '8px',
                      backgroundColor: '#f8f9fa',
                      borderRadius: '8px',
                      border: '1px solid #dee2e6'
                    }}>
                      <div className="batch-info">
                        <strong>‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà {index + 1}</strong>
                        <span className="batch-count" style={{ marginLeft: '8px', color: '#666' }}>
                          ({batch.length} ‡∏Ñ‡∏ô{batch.length === 4 ? ' - ‡πÄ‡∏ï‡πá‡∏°' : ' - ‡πÑ‡∏°‡πà‡πÄ‡∏ï‡πá‡∏°'})
                        </span>
                      </div>
                      <button
                        className="btn btn-outline btn-sm"
                        onClick={() => handlePrintBatch(index)}
                      >
                        ‡∏õ‡∏£‡∏¥‡πâ‡∏ô‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ
                      </button>
                    </div>
                  ))}
                </div>
              </div>
            </div>

            <div className="modal-actions">
              <button
                className="btn btn-outline"
                onClick={() => setShowBatchModal(false)}
              >
                ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ShippingQueue;