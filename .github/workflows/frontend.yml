# Alumni Frontend CI/CD Pipeline
# ไฟล์: frontend/.github/workflows/frontend.yml

name: 🎨 Frontend CI/CD

on:
  push:
    branches: [main, master]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
  pull_request:
    branches: [main, master]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/fontend-alumni

jobs:
  # ===== Build and Test Job =====
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # 📥 Checkout code
      - name: Checkout Repository
        uses: actions/checkout@v4

      # 🐳 Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🔐 Login to GitHub Container Registry
      - name: Login to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 🏷️ Extract metadata
      - name: Extract Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha
            type=raw,value=latest,enable={{is_default_branch}}

      # 🏗️ Build and Push Docker Image
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      # 📊 Output image details
      - name: Output Image Details
        run: |
          echo "🎉 Frontend image built successfully!"
          echo "📦 Image: ${{ env.IMAGE_NAME }}"
          echo "🏷️ Tags: ${{ steps.meta.outputs.tags }}"

  # ===== Deploy Job =====
  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
    
    steps:
      # 🚀 Trigger deployment on server
      - name: Deploy to Server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "🎨 Deploying Alumni Frontend..."
            
            # Navigate to deployment directory
            cd /opt/alumni-deploy || exit 1
            
            # Login to GHCR
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Pull latest frontend image
            echo "📥 Pulling latest frontend image..."
            docker pull ${{ env.IMAGE_NAME }}:latest
            
            # Restart frontend container
            echo "🔄 Restarting frontend container..."
            docker-compose pull alumni-frontend
            docker-compose up -d alumni-frontend
            
            # Health check
            echo "🩺 Checking frontend health..."
            sleep 15
            if curl -f http://localhost:80/health; then
              echo "✅ Frontend deployment successful!"
            else
              echo "❌ Frontend health check failed!"
              exit 1
            fi
            
            # Cleanup old images
            echo "🧹 Cleaning up old images..."
            docker image prune -f
            
            echo "🎉 Frontend deployment completed!"

  # ===== Notification Job =====
  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Status
        run: |
          if [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "success" ]; then
            echo "✅ Alumni Frontend: Build & Deploy successful!"
          elif [ "${{ needs.build.result }}" == "success" ] && [ "${{ needs.deploy.result }}" == "skipped" ]; then
            echo "✅ Alumni Frontend: Build successful (Deploy skipped for PR)"
          else
            echo "❌ Alumni Frontend: Build or Deploy failed!"
            echo "Build: ${{ needs.build.result }}"
            echo "Deploy: ${{ needs.deploy.result }}"
          fi